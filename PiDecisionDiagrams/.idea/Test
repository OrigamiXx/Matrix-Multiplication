import Transpositions, Permutations, utilities, PiDD

pi1 = PiDD.piDD()
perm1 = Permutations.Permutation([3, 5, 2, 1, 4])
pi1.single_perm(perm1)

pi2 = PiDD.piDD()
perm2 = Permutations.Permutation([4, 2, 1, 3, 5])
pi2.single_perm(perm2)


pi3 = PiDD.piDD()
pi3.piDD = {'[0]': None,
            '[1]': None,
            '[(2, 1)|[1]|[1]]': ([1], [1]),
            '[(3, 2)|[0]|[(2, 1)|[1]|[1]]]': ([0], (2, 1)),
            '[(4, 1)|[0]|[(3, 2)|[0]|[(2, 1)|[1]|[1]]]]': ([0], (3, 2)),
            '[(5, 4)|[0]|[(4, 1)|[0]|[(3, 2)|[0]|[(2, 1)|[0]|[1]]]]]': ([0], (4, 1))}


pi4 = PiDD.piDD()
pi4.piDD = {'[0]': None,
            '[1]': None,
            '[(2, 1)|[1]|[1]]': ([1], [1]),
            '[(3, 2)|[0]|[(2, 1)|[1]|[1]]]': ([0], (2, 1)),
            '[(3, 1)|[(3, 2)|[0]|[(2, 1)|[1]|[1]]]|[(2, 1)|[1]|[1]]]': ((3, 2), (2, 1)),
            '[(4, 3)|[0]|[(3, 1)|[(3, 2)|[0]|[(2, 1)|[1]|[1]]]|[(2, 1)|[1]|[1]]]': ([0], (3, 1)),
            '[(5, 4)|[0]|[(4, 3)|[0]|[(3, 1)|[(3, 2)|[0]|[(2, 1)|[1]|[1]]]|[(2, 1)|[1]|[1]]]':([0], (4, 3))}

list = list(pi1.piDD.keys())
print(list)
print(pi1.top_node)
print(pi1.top_node.split('|'))
print(type(pi3.find_children_nodes((2, 1))[0]))
